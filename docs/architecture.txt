
scripts/haystack:
    Search for struct in memory. Memory can be a file dump or a live process.
    calls haystack.abouchet
    
haytack.abouchet:
    a) Wraps memory dump using Factory haystack.memory_mapper.MemoryMapper.
    MemoryMapper outputs haystack.memory_mapping.MemoryMappings, a wrapper
        around memory mappings.

    b) treatment of other cmd line args
    
    c) search for structure with haystack.abouchet.StructFinder


haystack.abouchet.StructFinder:
    a) iterate over mappings in filter
    b) try to load struct on each aligned offset 
        MemoryMapping.readStruct -> load x bytes
    c) validates constraints from structure declaration
        "struct instance".loadMembers
    d) iterate.



haytack.model:
    Defines some base classes and API.
    Invokes haystack.types.CTypesProxy to replace the ctypes modules in 
    sys.modules.
    
    This module should be imported early.
    It is imported as first import of the haystack package.
    Any import of ctypes thereafter will effectively import the proxy instance.
    If a third party code was to use ctypes in a conflicting manner, the caller
    should switch from and for the original ctypes module by using
    haystack.types.reload_ctypes,load_ctypes_default,reset_ctypes,load_ctypes

haystack.types:
    Holds the ctypes proxy class CTypesProxy.
    If invoked with the host's current size of types, the proxy instance does 
    not alter the host ctypes module functionality.
    When installed with alternative type sizes then specific methods and types 
    are altered to match a specific target architecture.
    To use this, you need to use local ctypes imports.
    In haystack code, I would recommend NEVER EVER importing ctypes at the 
    module level.

haystack.utils:
    Functions used in the definitions of haystack ctypes record.
    Several ways to implement value-based constraints on fields.
