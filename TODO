

***** heap walker validator is not a validator all by itself.

- add a depth parameter to constraints loading on list fields.
- find out why its getting super slow in overall tests
- separate listmodel in a constraints like config file ?

- separate basicmodel from ctypes structures record. That will fix all the serialization errors.

- Model should not depends on ctypesProxy or LoadablesMembers. It could do it on Ctypes.Structure/Union.
- basicmodel should not be monkey patching ctypes.Structure for the sole purpose
to add methods. Only cross arch helper is authorised. We should have a worker 
class assessing a "normal" ctypes.Structure instance (modulo target arch)
- a working str() on Ctypes.loadableMembers requires no instanciated utils

- separated expectedValues from the record type. It should be in a separate dict, 
that is passed to the basicmodel searcher at search time.
constraints should not be applied on module/structure.

- add an searcher configuration for padding value == 0 ( to be forwarded to basicmodel)
- padding value should be 0 most of the time. make it configurable/monkeypatchable


- use ASN.1 for constraints.

- FIX get_heap on windows XP/zeus demo. Extract a process from a vol dump to make a test case.
- add a hintoffset search thingy, so that one can search for a structure at a particular offset of a mmap ? maybe to complex for API

- make a listmodel method for arrays of structures
- make the winxp freelists method to work.

- FIX the model reloading of ctypes across all modules.
    - unloading all reverse module is crude.
    - resetting some haystack sub modules (reverse) seems to work

- too many open files
    - close mappings file in memory mappings.???
    - clean all TU to clean memory mappings in bringDown

- use heapwalker plugins from rekall/volatility to create a proxy heapwalker ?


Attribute packed is not correct in ctypeslib

 - proper way to load constraints and bit-dependant modules is side by side
 
    # A - the caller has to load the proper bit-dependant python code,
    ctypes3 = cls.my_model.import_module("test.src.ctypes3_gen64")
    # my_model is alreadytarget dependant

    # B - then apply constraints on module.
    handler = constraints.ConstraintsConfigHandler()
    my_constraints = handler.read('test/src/ctypes3.constraints')
    results = haystack.search_record(self.memory_handler, self.ctypes3.struct_test3, my_constraints)



Todo:
 - Add a struct beautifier for the string formatting. (hex vs int)
 - easy API
 - documented example
 - Rekall plugin
 - Rekall memorymap
 - make basicmodel:loadable members work with vtypes ?
 - Check why pdfbparse reports some gaps in structs gap_in_pdb_ofs_3C (HEAP)
 - pylint ignore W0212 in profiles.
 - add PyQt4 as dependency for optional functions
 - Add to ipython


