// Generated by pdbparse v1.1 - -g -w 4 -d heap.structures.winxp.2 /home/other/outputs/pdb/WinXPSP3X86/ntoskrnl.pdb.exe

/******* Define basic Windows types *******/

// If compiling with gcc, use -fms-extensions

#include <stdint.h>

typedef  uint8_t     UINT8;
typedef  uint8_t     UCHAR;
typedef  uint8_t      BOOL;

typedef   int8_t      CHAR;
typedef   int8_t      INT8;

typedef uint16_t     WCHAR;
typedef uint16_t    UINT16;
typedef uint16_t    USHORT;
typedef  int16_t     SHORT;

typedef uint32_t    UINT32;
typedef uint32_t     ULONG;
typedef  int32_t      LONG;

typedef uint64_t    UINT64;
typedef uint64_t ULONGLONG;
typedef  int64_t  LONGLONG;

typedef uint64_t   PVOID64, PPVOID64;
typedef uint32_t   PVOID32, PPVOID32;
typedef     void      VOID;

typedef  double     DOUBLE; // not true but -hey FIXME

#ifdef WINDOWS_USE_32_BIT_POINTERS ///////////////
// pointers occupy exactly 32 bits
typedef  UINT32     PUINT8;
typedef  UINT32     PUCHAR;
typedef  UINT32      PBOOL;

typedef  UINT32      PCHAR;
typedef  UINT32      PINT8;

typedef  UINT32    PUINT16;
typedef  UINT32    PUSHORT;
typedef  UINT32     PSHORT;

typedef  UINT32     PUINT32;
typedef  UINT32      PULONG;
typedef  UINT32       PLONG;

typedef  UINT32     PUINT64;
typedef  UINT32  PULONGLONG;
typedef  UINT32   PLONGLONG;

typedef  UINT32       PVOID, PPVOID;

#else /////////////////  !WINDOWS_USE_32_BIT_POINTERS
// pointers occupy native address width per ABI
typedef     UINT8     *PUINT8;
typedef     UCHAR     *PUCHAR;
typedef      BOOL      *PBOOL;

typedef      CHAR      *PCHAR;
typedef      INT8      *PINT8;

typedef    UINT16    *PUINT16;
typedef    USHORT    *PUSHORT;
typedef     SHORT     *PSHORT;

typedef    UINT32    *PUINT32;
typedef     ULONG     *PULONG;
typedef      LONG      *PLONG;

typedef    UINT64    *PUINT64;
typedef ULONGLONG *PULONGLONG;
typedef  LONGLONG  *PLONGLONG;

typedef      VOID      *PVOID, **PPVOID;

#endif /////////////////  WINDOWS_USE_32_BIT_POINTERS

#define P(basetype, var) ( (basetype *)(var))

/******* circular dependencies *******/
struct _HEAP_LOOKASIDE;
typedef struct _HEAP_LOOKASIDE HEAP_LOOKASIDE;
typedef HEAP_LOOKASIDE *PHEAP_LOOKASIDE, **PPHEAP_LOOKASIDE;

struct _HEAP_SUBSEGMENT;
typedef struct _HEAP_SUBSEGMENT HEAP_SUBSEGMENT;
typedef HEAP_SUBSEGMENT *PHEAP_SUBSEGMENT, **PPHEAP_SUBSEGMENT;

struct _HEAP_USERDATA_HEADER;
typedef struct _HEAP_USERDATA_HEADER HEAP_USERDATA_HEADER;
typedef HEAP_USERDATA_HEADER *PHEAP_USERDATA_HEADER, **PPHEAP_USERDATA_HEADER;

/******* Enumerations *******/
/*******  Structures  *******/
typedef struct _SINGLE_LIST_ENTRY { // 0x4 bytes
	struct _SINGLE_LIST_ENTRY*  Next;                 // offset   0x0 size   0x4

} __attribute__((packed)) SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY, **PPSINGLE_LIST_ENTRY ;

typedef struct _LIST_ENTRY { // 0x8 bytes
	struct _LIST_ENTRY*  Flink;                       // offset   0x0 size   0x4
	struct _LIST_ENTRY*  Blink;                       // offset   0x4 size   0x4

} __attribute__((packed)) LIST_ENTRY, *PLIST_ENTRY, **PPLIST_ENTRY ;

typedef struct _INTERLOCK_SEQ { // 0x8 bytes
union {
	struct {
		USHORT Depth;                                    // offset   0x0 size   0x2
		USHORT FreeEntryOffset;                          // offset   0x2 size   0x2
	};
	struct {
		volatile ULONG OffsetAndDepth;                   // offset   0x0 size   0x4
		volatile ULONG Sequence;                         // offset   0x4 size   0x4
	};
	struct {
		volatile LONGLONG Exchg;                         // offset   0x0 size   0x8
	};
};
} __attribute__((packed)) INTERLOCK_SEQ, *PINTERLOCK_SEQ, **PPINTERLOCK_SEQ ;

typedef struct _HEAP_ENTRY { // 0x8 bytes
union {
	struct {
		USHORT Size;                                     // offset   0x0 size   0x2
		USHORT PreviousSize;                             // offset   0x2 size   0x2
	};
	struct {
		PVOID SubSegmentCode;                            // offset   0x0 size   0x4
		UCHAR SmallTagIndex;                             // offset   0x4 size   0x1
		UCHAR Flags;                                     // offset   0x5 size   0x1
		UCHAR UnusedBytes;                               // offset   0x6 size   0x1
		volatile UCHAR SegmentIndex;                     // offset   0x7 size   0x1
	};
};
} __attribute__((packed)) HEAP_ENTRY, *PHEAP_ENTRY, **PPHEAP_ENTRY ;

typedef struct _HEAP_ENTRY_EXTRA { // 0x8 bytes
union {
	struct {
		USHORT AllocatorBackTraceIndex;                  // offset   0x0 size   0x2
		USHORT TagIndex;                                 // offset   0x2 size   0x2
		ULONG Settable;                                  // offset   0x4 size   0x4
	};
	struct {
		ULONGLONG ZeroInit;                              // offset   0x0 size   0x8
	};
};
} __attribute__((packed)) HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA, **PPHEAP_ENTRY_EXTRA ;

typedef union _SLIST_HEADER { // 0x8 bytes
	ULONGLONG Alignment;                              // offset   0x0 size   0x8
	struct {
		SINGLE_LIST_ENTRY Next;                          // offset   0x0 size   0x4
		USHORT Depth;                                    // offset   0x4 size   0x2
		USHORT Sequence;                                 // offset   0x6 size   0x2
	};

} __attribute__((packed)) SLIST_HEADER, *PSLIST_HEADER, **PPSLIST_HEADER ;

typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY { // 0x20 bytes
	LIST_ENTRY Entry;                                 // offset   0x0 size   0x8
	HEAP_ENTRY_EXTRA ExtraStuff;                      // offset   0x8 size   0x8
	ULONG CommitSize;                                 // offset  0x10 size   0x4
	ULONG ReserveSize;                                // offset  0x14 size   0x4
	HEAP_ENTRY BusyBlock;                             // offset  0x18 size   0x8

} __attribute__((packed)) HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY, **PPHEAP_VIRTUAL_ALLOC_ENTRY ;

typedef struct _HEAP_USERDATA_HEADER { // 0x10 bytes
union {
	SINGLE_LIST_ENTRY SFreeListEntry;                 // offset   0x0 size   0x4
	struct {
		PHEAP_SUBSEGMENT SubSegment;                     // offset   0x0 size   0x4
		PVOID HeapHandle;                                // offset   0x4 size   0x4
		ULONG SizeIndex;                                 // offset   0x8 size   0x4
		ULONG Signature;                                 // offset   0xc size   0x4
	};
};
} __attribute__((packed)) HEAP_USERDATA_HEADER, *PHEAP_USERDATA_HEADER, **PPHEAP_USERDATA_HEADER ;

typedef struct _HEAP_SUBSEGMENT { // 0x20 bytes
	PVOID Bucket;                                     // offset   0x0 size   0x4
	volatile PHEAP_USERDATA_HEADER UserBlocks;        // offset   0x4 size   0x4
	INTERLOCK_SEQ AggregateExchg;                     // offset   0x8 size   0x8
	union {
		struct {
			USHORT BlockSize;                               // offset  0x10 size   0x2
			USHORT FreeThreshold;                           // offset  0x12 size   0x2
			USHORT BlockCount;                              // offset  0x14 size   0x2
			UCHAR SizeIndex;                                // offset  0x16 size   0x1
			UCHAR AffinityIndex;                            // offset  0x17 size   0x1
		};
		ULONG Alignment[0x2];                            // offset  0x10 size   0x8
	};
	SINGLE_LIST_ENTRY SFreeListEntry;                 // offset  0x18 size   0x4
	volatile ULONG Lock;                              // offset  0x1c size   0x4

} __attribute__((packed)) HEAP_SUBSEGMENT, *PHEAP_SUBSEGMENT, **PPHEAP_SUBSEGMENT ;

typedef struct _HEAP_LOOKASIDE { // 0x30 bytes
	SLIST_HEADER ListHead;                            // offset   0x0 size   0x8
	USHORT Depth;                                     // offset   0x8 size   0x2
	USHORT MaximumDepth;                              // offset   0xa size   0x2
	ULONG TotalAllocates;                             // offset   0xc size   0x4
	ULONG AllocateMisses;                             // offset  0x10 size   0x4
	ULONG TotalFrees;                                 // offset  0x14 size   0x4
	ULONG FreeMisses;                                 // offset  0x18 size   0x4
	ULONG LastTotalAllocates;                         // offset  0x1c size   0x4
	ULONG LastAllocateMisses;                         // offset  0x20 size   0x4
	ULONG Counters[0x2];                              // offset  0x24 size   0x8
	UINT8 gap_in_pdb_ofs_2C[0x4];                     // offset  0x2c size   0x4

} __attribute__((packed)) HEAP_LOOKASIDE, *PHEAP_LOOKASIDE, **PPHEAP_LOOKASIDE ;


